#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Be Literate
This file will generate [[file:init.el][init.el]] which can be loaded by Emacs on startup.
Maybe some things look familiar? I followed the really helpful [[https://www.youtube.com/c/SystemCrafters][Systemcrafters]] youtube channel on how to configure Emacs from scratch.

* Sane Defaults
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; disable startup message

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)  ; Disable the toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 15) ; Some breathing room
  (menu-bar-mode -1) ; Disable menu bar

  (setq visible-bell nil)
  (setq ring-bell-function 'ignore) ; no thank you
#+end_src

** clipboard
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
  (setq x-select-enable-primary t)
#+end_src

** autosaves
Not a fan of the backup~ and #autosave# files, I usually just find them cluttering up everything.
#+begin_src emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
#+end_src

* UI
#+begin_src emacs-lisp
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil :family "Tamsyn" :height 100 :weight 'normal))
    ('darwin
     (set-face-attribute 'default nil :font "PragmataPro Mono" :height 140 :weight 'bold)

     ;; for mac os: transparent titlebar without icons
     (add-to-list 'default-frame-alist  '(ns-transparent-titlebar . t))
     (setq ns-use-proxy-icon nil)
     (setq frame-title-format nil)))

  (setq-default line-spacing 10)

  (set-face-attribute 'fixed-pitch nil :family "Tamsyn" :weight 'normal)
  (set-face-attribute 'variable-pitch nil :font "Avenir Next LT Pro" :weight 'regular)

  (toggle-frame-maximized)
#+end_src

* Package Management
** package sources
You can always run package-refresh-contents in case that a package was not found.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** initialize use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Keybindings
** which-key
Make keybindings discoverable.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** general
Easy setup of keybindings.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer oem/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (oem/leader-key-def
      "b" '(:ignore t :which-key "buffer")
      "bb" '(switch-to-buffer :which-key "switch buffer")))
#+end_src

** evil
Can't live without vim keybindings.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

** key-chord
#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (setq key-chord-two-keys-delay 0.3)
    (key-chord-define evil-insert-state-map "fd" 'evil-normal-state)
    :config
    (key-chord-mode 1))
#+end_src

** hydra
For cycling things.
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (oem/leader-key-def
    "t" '(:ignore t :which-key "text")
    "ts" '(hydra-text-scale/body :which-text "text scale")
    "tf" '(:ignore t :which-key "fonts")

    "tfF" '(lambda () (interactive) (set-face-font 'default "PragmataPro Mono") :which-text "set scalable fixed font")
    "tff" '(lambda () (interactive) (set-face-font 'default "Tamsyn") :which-text "set bitmap fixed font"))
#+end_src

* Finding things
** swiper and ivy
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich)
#+end_src

** finding files
#+begin_src emacs-lisp
  (oem/leader-key-def
    "f" '(:ignore t :which-key "file")
    "ff" '(find-file :which-key "find file")
    "fr" '(counsel-buffer-or-recentf :which-key "recent files")
    "fd" '(:ignore t :which-key "find dotfiles")
    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/src/oem/dotfiles/emacs/emacs.org"))))
#+end_src

** finding projects
*** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/src")
      (setq projectile-project-search-path '("~/src")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (oem/leader-key-def
    "p" '(:ignore t :which-key "projects")
    "pf" '(projectile-find-file :which-text "find file in project")
    "pp" '(projectile-switch-project :which-text "switch projects"))
#+end_src

* Completing things
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** company mode
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (progr-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

* git
** magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

#+begin_src emacs-lisp
  (oem/leader-key-def
    "g" '(:ignore t :which-key "version control")
    "gg" '(magit-status :which-key "status"))
#+end_src

* Help
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-callable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Errors
#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

* Development
** languages
*** rust
#+begin_src emacs-lisp
  (defun oem/rustic-mode-hook ()
    (when buffer-file-name
      (setq-local  buffer-save-without-query t)))

  (use-package rustic
    :config
    (setq rustic-lsp-client 'lsp-mode
          rustic-lsp-server 'rust-analyzer
          rustic-analuzer-command '("/usr/local/bin/rust-analyzer"))
    (setq rustic-format-on-save t)
    (setq rust-format-on-save t)
    (add-hook 'rustic-mode-hook 'oem/rustic-mode-hook))
#+end_src

*** python
*** ruby
*** javascript

** lsp mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :custom
    (lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    (setq lsp-headerline-breadcrumb-enable nil)
    :hook (
           (rust-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)))
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover nil)
    (lsp-ui-doc-enable nil))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

** commenting things
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)

  (oem/leader-key-def
    "/" '(evilnc-comment-or-uncomment-lines :which-key "comment"))
#+end_src

* Themes
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 35))

  (use-package doom-themes
    :init (load-theme 'doom-dark+ t))

  (use-package all-the-icons)
#+end_src

* Org Mode
** refile, capture, agenda, habits and basics
#+begin_src emacs-lisp
  (defun oem/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . oem/org-mode-setup)
    :config
    (setq org-ellipsis " ✜")

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (load-library "find-lisp")
    (setq org-agenda-files
          (find-lisp-find-files "~/sync/brain/" "\.org$"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-window-setup 'current-window)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; org habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; org refile targets
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 3)
            ("tasks.org" :maxlevel . 2)))

    ;; save org buffers after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; custom org agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work")

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Backlog")))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready")))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active")))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed")))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled")))
              ))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/sync/brain/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("m" "Metrics")
            ("mw" "Water" table-line (file+headline "~/sync/brain/metrics.org" "Water")
             "| %U | %^{Glasses} |" :kill-buffer t)
            ("mW" "Weight" table-line (file+headline "~/sync/brain/metrics.org" "Weight")
             "| %U | %^{kg} | %^{notes} |" :kill-buffer t))))

  (oem/leader-key-def
    "o" '(:ignore t :which-key "org")
    "oa" '(org-agenda :which-text "org-agenda")
    "or" '(org-refile :which-text "org-refile")
    "oc" '(org-capture :which-text "org-capture"))

#+end_src

** bullets and looks
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◎" "◉" "○" "●")))

  (require 'org-indent)

  (dolist (face '((org-level-1 . 2.8)
                  (org-level-2 . 2.2)
                  (org-level-3 . 1.8)
                  (org-level-4 . 1.4)
                  (org-level-5 . 1.2)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Avenir Next LT Pro" :weight 'bold :height (cdr face)))

  ;; we don't want variable fonts for everything in org mode:
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (defun oem/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . oem/org-mode-visual-fill))
#+end_src

* Org Babel
** yes, just do it
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
#+end_src

** structure templates
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Setting up the config
Apply the same configuration to every block:
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

** Auto-tangle config file
We want to tangle this file whenever we save changes.
#+begin_src emacs-lisp
  (defun oem/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/src/oem/dotfiles/emacs/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'oem/org-babel-tangle-config)))
#+end_src
